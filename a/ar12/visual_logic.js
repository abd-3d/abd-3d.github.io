/* eslint-disable */

/**
 * Generated by Verge3D Puzzles v.4.6.0
 * Sat, 28 Sep 2024 16:05:37 GMT
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */
function createPL(v3d = window.v3d) {

// global variables used in the init tab
const _initGlob = {
    percentage: 0,
    output: {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        },
    },
};


// global variables/constants used by puzzles' functions
var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.openedFileMeta = {};
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};
_pGlob.customEvents = new v3d.EventDispatcher();
_pGlob.eventListeners = [];
_pGlob.htmlElements = new Set();

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster(); // always check visibility

const createPzLib = ({ v3d=null, appInstance=null }) => {
    function getElement(id, isParent=false) {
        let elem;
        if (Array.isArray(id) && id[0] === 'CONTAINER') {
            if (appInstance !== null) {
                elem = appInstance.container;
            } else if (typeof _initGlob !== 'undefined') {
                // if we are on the initialization stage, we still can have access
                // to the container element
                const contId = _initGlob.container;
                elem = isParent ? parent.document.getElementById(contId)
                        : document.getElementById(contId);
            }
        } else if (Array.isArray(id) && id[0] === 'WINDOW') {
            elem = isParent ? parent : window;
        } else if (Array.isArray(id) && id[0] === 'DOCUMENT') {
            elem = isParent ? parent.document : document;
        } else if (Array.isArray(id) && id[0] === 'BODY') {
            elem = isParent ? parent.document.body : document.body;
        } else if (Array.isArray(id) && id[0] === 'QUERYSELECTOR') {
            elem = isParent ? parent.document.querySelector(id)
                    : document.querySelector(id);
        } else {
            elem = isParent ? parent.document.getElementById(id)
                    : document.getElementById(id);
        }
        return elem;
    }
        
    function getElements(ids, isParent=false) {
        const elems = [];
        if (Array.isArray(ids) && ids[0] !== 'CONTAINER' && ids[0] !== 'WINDOW'
                && ids[0] !== 'DOCUMENT' && ids[0] !== 'BODY'
                && ids[0] !== 'QUERYSELECTOR') {
            for (let i = 0; i < ids.length; i++) {
                elems.push(getElement(ids[i], isParent));
            }
        } else {
            elems.push(getElement(ids, isParent));
        }
        return elems;
    }
        
    function transformCoordsSpace(coords, spaceFrom, spaceTo, noSignChange=false) {
    
        if (spaceFrom === spaceTo) {
            return coords;
        }
    
        const y = coords.y;
        const z = coords.z;
    
        if (spaceFrom === 'Z_UP_RIGHT' && spaceTo === 'Y_UP_RIGHT') {
            coords.y = z;
            coords.z = noSignChange ? y : -y;
        } else if (spaceFrom === 'Y_UP_RIGHT' && spaceTo === 'Z_UP_RIGHT') {
            coords.y = noSignChange ? z : -z;
            coords.z = y;
        } else {
            console.error('transformCoordsSpace: Unsupported coordinate space');
        }
    
        return coords;
    }
        
    const transformEulerV3dToBlenderShortest = function() {
        const eulerTmp = new v3d.Euler();
        const eulerTmp2 = new v3d.Euler();
        const vec3Tmp = new v3d.Vector3();
    
        return function(euler, dest) {
            const eulerBlender = eulerTmp.copy(euler).reorder('YZX');
            const eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();
    
            const len = vec3Tmp.setFromEuler(eulerBlender).lengthSq();
            const lenAlt = vec3Tmp.setFromEuler(eulerBlenderAlt).lengthSq();
    
            dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
            return transformCoordsSpace(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
        }
    }();
        
    function getSceneCoordSystem() {
        const scene = appInstance.scene;
        if (scene && 'coordSystem' in scene.userData) {
            return scene.userData.coordSystem;
        }
    
        return 'Y_UP_RIGHT';
    }
        
    function isObjectWorthProcessing(obj) {
        return obj.type !== 'AmbientLight' && obj.name !== '' &&
                !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
                !obj.isAuxClippingMesh;
    }
        
    function getObjectByName(objName) {
        let objFound = null;
    
        const pGlobAvailable = _pGlob !== undefined;
        if (pGlobAvailable && objName in _pGlob.objCache) {
            objFound = _pGlob.objCache[objName] || null;
        }
    
        if (objFound && objFound.name === objName) {
            return objFound;
        }
    
        if (appInstance.scene) {
            appInstance.scene.traverse(obj => {
                if (!objFound && isObjectWorthProcessing(obj) && (obj.name === objName)) {
                    objFound = obj;
                    if (pGlobAvailable) {
                        _pGlob.objCache[objName] = objFound;
                    }
                }
            });
        }
        return objFound;
    }
        
    function RotationInterface() {
        /**
         * @ignore
         * For user manipulations use XYZ extrinsic rotations (which
         * are the same as ZYX intrinsic rotations)
         *     - Blender/Max/Maya use extrinsic rotations in the UI
         *     - XYZ is the default option, but could be set from
         *       some order hint if exported
         */
        this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
        this._actualRotation = new v3d.Euler();
    }
    
    Object.assign(RotationInterface, {
        initObject: function(obj) {
            if (obj.userData.puzzles === undefined) {
                obj.userData.puzzles = {}
            }
            if (obj.userData.puzzles.rotationInterface === undefined) {
                obj.userData.puzzles.rotationInterface = new RotationInterface();
            }
    
            const rotUI = obj.userData.puzzles.rotationInterface;
            rotUI.updateFromObject(obj);
            return rotUI;
        },
    });
    
    Object.assign(RotationInterface.prototype, {
        updateFromObject: function(obj) {
            const SYNC_ROT_EPS = 1e-8;
    
            if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
                this._actualRotation.copy(obj.rotation);
                this._updateUserRotFromActualRot();
            }
        },
    
        getActualRotation: function(euler) {
            return euler.copy(this._actualRotation);
        },
    
        setUserRotation: function(euler) {
            // don't copy the order, since it's fixed to ZYX for now
            this._userRotation.set(euler.x, euler.y, euler.z);
            this._updateActualRotFromUserRot();
        },
    
        getUserRotation: function(euler) {
            return euler.copy(this._userRotation);
        },
    
        _updateUserRotFromActualRot: function() {
            const order = this._userRotation.order;
            this._userRotation.copy(this._actualRotation).reorder(order);
        },
    
        _updateActualRotFromUserRot: function() {
            const order = this._actualRotation.order;
            this._actualRotation.copy(this._userRotation).reorder(order);
        },
    });
        
    function getObjectNamesByGroupName(groupName) {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                const objGroupNames = obj.groupNames;
                if (!objGroupNames) {
                    return;
                }
    
                for (let i = 0; i < objGroupNames.length; i++) {
                    const objGroupName = objGroupNames[i];
                    if (objGroupName === groupName) {
                        objNameList.push(obj.name);
                    }
                }
            }
        });
        return objNameList;
    }
        
    function getAllObjectNames() {
        const objNameList = [];
        appInstance.scene.traverse(obj => {
            if (isObjectWorthProcessing(obj)) {
                objNameList.push(obj.name);
            }
        });
        return objNameList;
    }
        
    function retrieveObjectNamesAccum(currObjNames, namesAccum) {
        if (typeof currObjNames === 'string') {
            namesAccum.push(currObjNames);
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'GROUP') {
            const newObjNames = getObjectNamesByGroupName(currObjNames[1]);
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames) && currObjNames[0] === 'ALL_OBJECTS') {
            const newObjNames = getAllObjectNames();
            for (let i = 0; i < newObjNames.length; i++) {
                namesAccum.push(newObjNames[i]);
            }
        } else if (Array.isArray(currObjNames)) {
            for (let i = 0; i < currObjNames.length; i++) {
                retrieveObjectNamesAccum(currObjNames[i], namesAccum);
            }
        }
    }
        
    function retrieveObjectNames(objNames) {
        const accum = [];
        retrieveObjectNamesAccum(objNames, accum);
        return accum.filter(name => name !== '');
    }
        
    function getObjectName(obj) {
        // auto-generated from a multi-material object, use parent name instead
        if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
            return obj.parent.name;
        } else {
            return obj.name;
        }
    }
        
    function areListenersSame(target0, type0, listener0, optionsOrUseCapture0,
            target1, type1, listener1, optionsOrUseCapture1) {
        const capture0 = Boolean(optionsOrUseCapture0 instanceof Object
                ? optionsOrUseCapture0.capture : optionsOrUseCapture0);
        const capture1 = Boolean(optionsOrUseCapture1 instanceof Object
                ? optionsOrUseCapture1.capture : optionsOrUseCapture1);
        return target0 === target1 && type0 === type1 && listener0 === listener1
                && capture0 === capture1;
    }
        
    function bindListener(target, type, listener, optionsOrUseCapture) {
        const alreadyExists = _pGlob.eventListeners.some(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                    elem.optionsOrUseCapture, target, type, listener,
                    optionsOrUseCapture);
        });
    
        if (!alreadyExists) {
            target.addEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.push({ target, type, listener,
                    optionsOrUseCapture });
        }
    }
        
    function initObjectPicking(callback, eventType, mouseDownUseTouchStart=false,
            allowedMouseButtons=null) {
    
        const elem = appInstance.renderer.domElement;
        bindListener(elem, eventType, pickListener);
    
        if (eventType === 'mousedown') {
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, pickListener);
    
        } else if (eventType === 'dblclick') {
    
            let prevTapTime = 0;
    
            function doubleTapCallback(event) {
                const now = new Date().getTime();
                const timesince = now - prevTapTime;
    
                if (timesince < 600 && timesince > 0) {
                    pickListener(event);
                    prevTapTime = 0;
                    return;
                }
    
                prevTapTime = new Date().getTime();
            }
    
            const touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
            bindListener(elem, touchEventName, doubleTapCallback);
        }
    
        const raycaster = new v3d.Raycaster();
    
        function pickListener(event) {
    
            // to handle unload in loadScene puzzle
            if (!appInstance.getCamera()) {
                return;
            }
    
            event.preventDefault();
    
            let xNorm = 0;
            let yNorm = 0;
            if (event instanceof MouseEvent) {
                if (allowedMouseButtons !== null && allowedMouseButtons.indexOf(event.button) === -1) {
                    return;
                }
                xNorm = event.offsetX / elem.clientWidth;
                yNorm = event.offsetY / elem.clientHeight;
            } else if (event instanceof TouchEvent) {
                const rect = elem.getBoundingClientRect();
                xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
                yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
            }
    
            _pGlob.screenCoords.x = xNorm * 2 - 1;
            _pGlob.screenCoords.y = -yNorm * 2 + 1;
            raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
    
            const objList = [];
            appInstance.scene.traverse(obj => objList.push(obj));
    
            const intersects = raycaster.intersectObjects(objList, false);
            callback(intersects, event);
        }
    }
        
    function isObjectAmongObjects(objNameToCheck, objNames) {
        if (!objNameToCheck) {
            return false;
        }
    
        for (let i = 0; i < objNames.length; i++) {
            if (objNameToCheck === objNames[i]) {
                return true;
            } else {
                // also check children which are auto-generated for multi-material objects
                const obj = getObjectByName(objNames[i]);
                if (obj && obj.type === 'Group') {
                    for (let j = 0; j < obj.children.length; j++) {
                        if (objNameToCheck === obj.children[j].name) {
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }
        
    function getMaterialEditableValues(matName) {
        const mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (!mat) {
            return [];
        }
    
        if (mat.isMeshNodeMaterial) {
            return Object.keys(mat.nodeValueMap);
        } else if (mat.isMeshStandardMaterial) {
            return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity',
                    'envMapIntensity'];
        } else {
            return [];
        }
    }
        
    function AudioWebAudio() {
        this.audio = new v3d.Audio(new v3d.AudioListener());
    
        this._muted = false;
        this._volume = 1;
    }
    
    Object.assign(AudioWebAudio.prototype, {
    
        load: function(url) {
            const scope = this;
    
            const xhr = new XMLHttpRequest();
            xhr.open('GET', url);
            xhr.responseType = 'arraybuffer';
    
            xhr.onload = function(e) {
                if (this.status === 200) {
                    // new promise-based syntax is not currently supported in Safari
                    scope.audio.context.decodeAudioData(this.response, function(decodedData) {
                        scope.audio.setBuffer(decodedData);
                    });
                }
            }
    
            xhr.send();
            return this;
        },
    
        play: function() {
            if (this.audio.buffer === null) return;
            this.audio.play();
        },
    
        pause: function() {
            this.audio.pause();
        },
    
        stop: function() {
            if (this.audio.buffer === null || this.audio.source === null) return;
            this.audio.stop();
        },
    
        rewind: function() {
            if (this.audio.buffer === null || this.audio.source === null) return;
    
            const isPlaying = this.audio.isPlaying;
            this.audio.stop();
            if (isPlaying) {
                this.audio.play();
            }
        },
    
        setPlaybackTime: function(time) {
            // TODO: not easy with WebAudio
        },
    
        getPlaybackTime: function() {
            // TODO: not easy with WebAudio
            return 0;
        },
    
        getDuration: function() {
            return (this.audio.buffer === null) ? 0 : this.audio.buffer.duration;
        },
    
        setPlaybackRate: function(rate) {
            this.audio.setPlaybackRate(rate);
        },
    
        isPlaying: function() {
            return this.audio.isPlaying;
        },
    
        setLoop: function(looped) {
            this.audio.setLoop(looped);
        },
    
        setVolume: function(volume) {
            this._volume = volume;
            if (!this._muted) {
                this.audio.setVolume(volume);
            }
        },
    
        setMuted: function(muted) {
            this._muted = muted;
            this.audio.setVolume(muted ? 0 : this._volume);
        },
    
    });
        
    function getSceneAnimFrameRate(scene) {
        if (scene && 'animFrameRate' in scene.userData) {
            return scene.userData.animFrameRate;
        }
        return 24;
    }
        
    function getSceneByAction(action) {
        const root = action.getRoot();
        let scene = root.type === 'Scene' ? root : null;
        root.traverseAncestors(ancObj => {
            if (ancObj.type === 'Scene') {
                scene = ancObj;
            }
        });
        return scene;
    }
        
    const Tween = (function() {
    
    var _Group=function(){this._tweens={},this._tweensAddedDuringUpdate={}};_Group.prototype={getAll:function(){return Object.keys(this._tweens).map(function(t){return this._tweens[t]}.bind(this))},removeAll:function(){this._tweens={}},add:function(t){this._tweens[t.getId()]=t,this._tweensAddedDuringUpdate[t.getId()]=t},remove:function(t){delete this._tweens[t.getId()],delete this._tweensAddedDuringUpdate[t.getId()]},update:function(t,n){var e=Object.keys(this._tweens);
    if(0===e.length)return!1;for(t=void 0!==t?t:TWEEN.now();0<e.length;){this._tweensAddedDuringUpdate={};for(var i=0;i<e.length;i++){var r=this._tweens[e[i]];r&&!1===r.update(t)&&(r._isPlaying=!1,n||delete this._tweens[e[i]])}e=Object.keys(this._tweensAddedDuringUpdate)}return!0}};var TWEEN=new _Group;TWEEN.Group=_Group,TWEEN._nextId=0,TWEEN.nextId=function(){return TWEEN._nextId++},"undefined"==typeof window&&"undefined"!=typeof process&&process.hrtime?TWEEN.now=function(){var t=process.hrtime();
    return 1e3*t[0]+t[1]/1e6}:"undefined"!=typeof window&&void 0!==window.performance&&void 0!==window.performance.now?TWEEN.now=window.performance.now.bind(window.performance):void 0!==Date.now?TWEEN.now=Date.now:TWEEN.now=function(){return(new Date).getTime()},TWEEN.Tween=function(t,n){this._object=t,this._valuesStart={},this._valuesEnd={},this._valuesStartRepeat={},this._duration=1e3,this._repeat=0,this._repeatDelayTime=void 0,this._yoyo=!1,this._isPlaying=!1,this._reversed=!1,this._delayTime=0,
    this._startTime=null,this._easingFunction=TWEEN.Easing.Linear.None,this._interpolationFunction=TWEEN.Interpolation.Linear,this._chainedTweens=[],this._onStartCallback=null,this._onStartCallbackFired=!1,this._onUpdateCallback=null,this._onCompleteCallback=null,this._onStopCallback=null,this._group=n||TWEEN,this._id=TWEEN.nextId()},TWEEN.Tween.prototype={getId:function(){return this._id},isPlaying:function(){return this._isPlaying},to:function(t,n){return this._valuesEnd=t,void 0!==n&&(this._duration=n),this},start:function(t){for(var n in this._group.add(this),this._isPlaying=!0,this._onStartCallbackFired=!1,this._startTime=void 0!==t?"string"==typeof t?TWEEN.now()+parseFloat(t):t:TWEEN.now(),this._startTime+=this._delayTime,this._valuesEnd){if(this._valuesEnd[n]instanceof Array){if(0===this._valuesEnd[n].length)continue;
    this._valuesEnd[n]=[this._object[n]].concat(this._valuesEnd[n])}void 0!==this._object[n]&&(this._valuesStart[n]=this._object[n],this._valuesStart[n]instanceof Array==!1&&(this._valuesStart[n]*=1),this._valuesStartRepeat[n]=this._valuesStart[n]||0)}return this},stop:function(){return this._isPlaying&&(this._group.remove(this),this._isPlaying=!1,null!==this._onStopCallback&&this._onStopCallback(this._object),this.stopChainedTweens()),this},end:function(){return this.update(this._startTime+this._duration),this},stopChainedTweens:function(){for(var t=0,n=this._chainedTweens.length;t<n;
    t++)this._chainedTweens[t].stop()},group:function(t){return this._group=t,this},delay:function(t){return this._delayTime=t,this},repeat:function(t){return this._repeat=t,this},repeatDelay:function(t){return this._repeatDelayTime=t,this},yoyo:function(t){return this._yoyo=t,this},easing:function(t){return this._easingFunction=t,this},interpolation:function(t){return this._interpolationFunction=t,this},chain:function(){return this._chainedTweens=arguments,this},onStart:function(t){return this._onStartCallback=t,this},onUpdate:function(t){return this._onUpdateCallback=t,this},onComplete:function(t){return this._onCompleteCallback=t,this},onStop:function(t){return this._onStopCallback=t,this},update:function(t){var n,e,i;if(t<this._startTime)return!0;
    for(n in!1===this._onStartCallbackFired&&(null!==this._onStartCallback&&this._onStartCallback(this._object),this._onStartCallbackFired=!0),e=(t-this._startTime)/this._duration,e=0===this._duration||1<e?1:e,i=this._easingFunction(e),this._valuesEnd)if(void 0!==this._valuesStart[n]){var r=this._valuesStart[n]||0,a=this._valuesEnd[n];a instanceof Array?this._object[n]=this._interpolationFunction(a,i):("string"==typeof a&&(a="+"===a.charAt(0)||"-"===a.charAt(0)?r+parseFloat(a):parseFloat(a)),"number"==typeof a&&(this._object[n]=r+(a-r)*i))}if(null!==this._onUpdateCallback&&this._onUpdateCallback(this._object),1!==e)return!0;
    if(0<this._repeat){for(n in isFinite(this._repeat)&&this._repeat--,this._valuesStartRepeat){if("string"==typeof this._valuesEnd[n]&&(this._valuesStartRepeat[n]=this._valuesStartRepeat[n]+parseFloat(this._valuesEnd[n])),this._yoyo){var s=this._valuesStartRepeat[n];this._valuesStartRepeat[n]=this._valuesEnd[n],this._valuesEnd[n]=s}this._valuesStart[n]=this._valuesStartRepeat[n]}return this._yoyo&&(this._reversed=!this._reversed),void 0!==this._repeatDelayTime?this._startTime=t+this._repeatDelayTime:this._startTime=t+this._delayTime,!0}null!==this._onCompleteCallback&&this._onCompleteCallback(this._object);for(var o=0,u=this._chainedTweens.length;o<u;o++)this._chainedTweens[o].start(this._startTime+this._duration);
    return!1}},TWEEN.Easing={Linear:{None:function(t){return t}},Quadratic:{In:function(t){return t*t},Out:function(t){return t*(2-t)},InOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)}},Cubic:{In:function(t){return t*t*t},Out:function(t){return--t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)}},Quartic:{In:function(t){return t*t*t*t},Out:function(t){return 1- --t*t*t*t},InOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)}},Quintic:{In:function(t){return t*t*t*t*t},Out:function(t){return--t*t*t*t*t+1},InOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)}},Sinusoidal:{In:function(t){return 1-Math.cos(t*Math.PI/2)},Out:function(t){return Math.sin(t*Math.PI/2)},InOut:function(t){return.5*(1-Math.cos(Math.PI*t))}},Exponential:{In:function(t){return 0===t?0:Math.pow(1024,t-1)},Out:function(t){return 1===t?1:1-Math.pow(2,-10*t)},
    InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))}},Circular:{In:function(t){return 1-Math.sqrt(1-t*t)},Out:function(t){return Math.sqrt(1- --t*t)},InOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)}},Elastic:{In:function(t){return 0===t?0:1===t?1:-Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)},Out:function(t){return 0===t?0:1===t?1:Math.pow(2,-10*t)*Math.sin(5*(t-.1)*Math.PI)+1},InOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?-.5*Math.pow(2,10*(t-1))*Math.sin(5*(t-1.1)*Math.PI):.5*Math.pow(2,-10*(t-1))*Math.sin(5*(t-1.1)*Math.PI)+1}},Back:{In:function(t){return t*t*(2.70158*t-1.70158)},Out:function(t){return--t*t*(2.70158*t+1.70158)+1},InOut:function(t){var n=2.5949095;
    return(t*=2)<1?t*t*((n+1)*t-n)*.5:.5*((t-=2)*t*((n+1)*t+n)+2)}},Bounce:{In:function(t){return 1-TWEEN.Easing.Bounce.Out(1-t)},Out:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},InOut:function(t){return t<.5?.5*TWEEN.Easing.Bounce.In(2*t):.5*TWEEN.Easing.Bounce.Out(2*t-1)+.5}}},TWEEN.Interpolation={Linear:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.Linear;return n<0?a(t[0],t[1],i):1<n?a(t[e],t[e-1],e-i):a(t[r],t[e<r+1?e:r+1],i-r)},Bezier:function(t,n){for(var e=0,i=t.length-1,r=Math.pow,a=TWEEN.Interpolation.Utils.Bernstein,s=0;s<=i;s++)e+=r(1-n,i-s)*r(n,s)*t[s]*a(i,s);return e},CatmullRom:function(t,n){var e=t.length-1,i=e*n,r=Math.floor(i),a=TWEEN.Interpolation.Utils.CatmullRom;
    return t[0]===t[e]?(n<0&&(r=Math.floor(i=e*(1+n))),a(t[(r-1+e)%e],t[r],t[(r+1)%e],t[(r+2)%e],i-r)):n<0?t[0]-(a(t[0],t[0],t[1],t[1],-i)-t[0]):1<n?t[e]-(a(t[e],t[e],t[e-1],t[e-1],i-e)-t[e]):a(t[r?r-1:0],t[r],t[e<r+1?e:r+1],t[e<r+2?e:r+2],i-r)},Utils:{Linear:function(t,n,e){return(n-t)*e+t},Bernstein:function(t,n){var e=TWEEN.Interpolation.Utils.Factorial;return e(t)/e(n)/e(t-n)},Factorial:function(){var i=[1];return function(t){var n=1;if(i[t])return i[t];for(var e=t;1<e;e--)n*=e;return i[t]=n}}(),CatmullRom:function(t,n,e,i,r){var a=.5*(e-t),s=.5*(i-n),o=r*r;return(2*n-2*e+a+s)*(r*o)+(-3*n+3*e-2*a-s)*o+a*r+n}}},function(t){"function"==typeof define&&define.amd?define([],function(){return TWEEN}):"undefined"!=typeof module&&"object"==typeof exports?module.exports=TWEEN:void 0!==t&&(console.log(t),t.TWEEN=TWEEN)}(this);
    
    return TWEEN;
    })();
        
    function xrTraverseNonControllers(obj, callback) {
        if (obj.name.startsWith('XR_CONTROLLER_')) {
            return;
        }
    
        callback(obj);
    
        const children = obj.children;
        for (let i = 0, l = children.length; i < l; i++) {
            xrTraverseNonControllers(children[i], callback);
        }
    };
        
    function xrGetIntersections(controller) {
        controller.updateMatrixWorld(true);
    
        _pGlob.mat4Tmp.identity().extractRotation(controller.matrixWorld);
    
        const objList = [];
        xrTraverseNonControllers(appInstance.scene, obj => objList.push(obj));
    
        const raycaster = new v3d.Raycaster();
        raycaster.ray.origin.setFromMatrixPosition(controller.matrixWorld);
        raycaster.ray.direction.set(0, 0, -1).applyMatrix4(_pGlob.mat4Tmp);
    
        return raycaster.intersectObjects(objList, false);
    }
        
    function xrOnSelect(event) {
        if (!_pGlob.objClickInfo) {
            return;
        }
    
        const controller = event.target;
        const intersections = xrGetIntersections(controller);
    
        if (intersections.length > 0) {
            const intersection = intersections[0];
            const obj = intersection.object;
    
            // save the object for the pickedObject block
            _pGlob.pickedObject = getObjectName(obj);
    
            _pGlob.objClickInfo.forEach(el => {
                const isPicked = obj && isObjectAmongObjects(getObjectName(obj),
                        retrieveObjectNames(el.objSelector));
                el.callbacks[isPicked ? 0 : 1]();
            });
        } else {
            // missed
            _pGlob.objClickInfo.forEach(el => el.callbacks[1]());
        }
    }
        
    function unbindListener(target, type, listener, optionsOrUseCapture) {
        const index = _pGlob.eventListeners.findIndex(elem => {
            return areListenersSame(elem.target, elem.type, elem.listener,
                elem.optionsOrUseCapture, target, type, listener,
                optionsOrUseCapture);
        });
    
        if (index !== -1) {
            target.removeEventListener(type, listener, optionsOrUseCapture);
            _pGlob.eventListeners.splice(index, 1);
        }
    }
        
    const LIST_NONE = '<none>';
        
    function getEventOffsetCoords(event, touchId, dest) {
        if (event instanceof MouseEvent) {
            dest.set(event.offsetX, event.offsetY);
        } else if (window.TouchEvent && event instanceof TouchEvent) {
            const rect = event.target.getBoundingClientRect();
            let touches = event.touches;
            if (event.type === 'touchstart' || event.type === 'touchend'
                    || event.type === 'touchmove') {
                touches = event.changedTouches;
            }
    
            let touch = touches[0];
            for (let i = 0; i < touches.length; i++) {
                if (touches[i].identifier === touchId) {
                    touch = touches[i];
                    break;
                }
            }
    
            dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
        }
        return dest;
    }
        
    function isChangedTouchOrNotTouchEventAtAll(event, touchId) {
        if (window.TouchEvent && event instanceof TouchEvent) {
            if (event.type === 'touchstart' || event.type === 'touchend'
                    || event.type === 'touchmove') {
                let isChanged = false;
                for (let i = 0; i < event.changedTouches.length; i++) {
                    if (event.changedTouches[i].identifier === touchId) {
                        isChanged = true;
                        break;
                    }
                }
                return isChanged;
            }
        }
    
        return true;
    }
        
    function getEventFirstTouchId(event) {
        if (window.TouchEvent && event instanceof TouchEvent) {
            if (event.type === 'touchstart' || event.type === 'touchend'
                    || event.type === 'touchmove') {
                return event.changedTouches[0].identifier;
            } else {
                return event.touches[0].identifier;
            }
        }
        return -1;
    }
        
    function createDragOverInfo() {
        return {
            draggedObjName: '',
            downX: 0, downY: 0,
            prevX: 0, prevY: 0,
            currX: 0, currY: 0,
            isDowned: false,
            isMoved: false,
            touchId: -1,
            downPointWorld: new v3d.Vector3(),
        };
    }

    return {
        getElement, getElements, transformCoordsSpace, transformEulerV3dToBlenderShortest,
        getSceneCoordSystem, getObjectByName, RotationInterface, retrieveObjectNames,
        getObjectName, initObjectPicking, isObjectAmongObjects, getMaterialEditableValues,
        AudioWebAudio, bindListener, getSceneAnimFrameRate, getSceneByAction,
        Tween, xrOnSelect, unbindListener, LIST_NONE,
        getEventOffsetCoords, isChangedTouchOrNotTouchEventAtAll, getEventFirstTouchId, createDragOverInfo,
    };
};

var PL = {};
// backward compatibility
if (v3d[Symbol.toStringTag] !== 'Module') {
    v3d.PL = v3d.puzzles = PL;
}

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    const PzLib = createPzLib({ v3d });

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    // initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = true;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

const PzLib = createPzLib({ v3d, appInstance });

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}



var PROC = {
    
};

var VARS = Object.defineProperties({}, {
    'camera_pos': { get: function() { return camera_pos; }, set: function(val) { camera_pos = val; } },
    'is_ar': { get: function() { return is_ar; }, set: function(val) { is_ar = val; } },
    'is_obj': { get: function() { return is_obj; }, set: function(val) { is_obj = val; } },
    'is_expo': { get: function() { return is_expo; }, set: function(val) { is_expo = val; } },
    'ch_1': { get: function() { return ch_1; }, set: function(val) { ch_1 = val; } },
    'ch_2': { get: function() { return ch_2; }, set: function(val) { ch_2 = val; } },
    'ch_3': { get: function() { return ch_3; }, set: function(val) { ch_3 = val; } },
    'is_placeable': { get: function() { return is_placeable; }, set: function(val) { is_placeable = val; } },
    'mode': { get: function() { return mode; }, set: function(val) { mode = val; } },
});

var camera_pos, is_ar, ch_1, is_placeable, mode, is_obj, ch_2, is_expo, ch_3;

// addHTMLElement puzzle
function addHTMLElement(elemType, id, mode, targetId, isParent) {
    const win = isParent ? window.parent : window;

    const elem = win.document.createElement(elemType);
    if (id !== '')
        elem.id = id;

    const targetElem = PzLib.getElement(targetId, isParent);
    if (targetElem instanceof win.Element) {
        switch (mode) {
            case 'TO':
                targetElem.appendChild(elem);
                break;
            case 'BEFORE':
                targetElem.insertAdjacentElement('beforebegin', elem);
                break;
            case 'AFTER':
                targetElem.insertAdjacentElement('afterend', elem);
                break;
        }

        _pGlob.htmlElements.add(elem);
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// brightnessContrast puzzle
function brightnessContrast(brightness, contrast) {
    appInstance.enablePostprocessing([{
        type: 'brightnessContrast',
        brightness: brightness,
        contrast: contrast
    }]);
}

// bloom puzzle
function bloom(threshold, strength, radius) {
    appInstance.enablePostprocessing([{
        type: 'bloom',
        threshold: threshold,
        strength: strength,
        radius: radius
    }]);
}

// featureAvailable puzzle
function featureAvailable(feature) {

    var userAgent = window.navigator.userAgent;
    var platform = window.navigator.platform;

    switch (feature) {
    case 'MOBILE':
        return (/Android|webOS|BlackBerry/i.test(userAgent) || v3d.Detector.checkIOS());

    case 'ANDROID':
        return /Android/i.test(userAgent);
    case 'IOS':
        return v3d.Detector.checkIOS();
    case 'WINDOWS':
        return ['Win32', 'Win64', 'Windows', 'WinCE'].indexOf(platform) !== -1;
    case 'MACOS':
        return (['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].indexOf(platform) !== -1 && !v3d.Detector.checkIOS());
    case 'CHROMEOS':
        return /(CrOS)/.test(userAgent);
    case 'LINUX':
        return /Linux/.test(platform);

    case 'CHROME':
        // Chromium based
        return (!!window.chrome && !/Edge/.test(navigator.userAgent));
    case 'FIREFOX':
        return /Firefox/.test(navigator.userAgent);
    case 'IE':
        return /Trident/.test(navigator.userAgent);
    case 'EDGE':
        return /Edge/.test(navigator.userAgent);
    case 'SAFARI':
        return (/Safari/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent));

    case 'TOUCH':
        return v3d.Detector.isTouchDevice();
    case 'RETINA':
        return window.devicePixelRatio >= 2;
    case 'HDR':
        return appInstance.useHDR;
    case 'WEBAUDIO':
        return v3d.Detector.checkWebAudio();
    case 'WEBGL':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl')
        return !!gl;
    case 'WEBGL2':
        var canvas = document.createElement('canvas');
        var gl = canvas.getContext('webgl2')
        return !!gl;
    case 'WOOCOMMERCE':
        var woo_fun = window.parent.v3d_woo_get_product_info || window.parent.parent.v3d_woo_get_product_info;
        return !!woo_fun;
    case 'DO_NOT_TRACK':
        if (navigator.doNotTrack == '1' || window.doNotTrack == '1')
            return true;
        else
            return false;
    default:
        return false;
    }

}

// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = PzLib.getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = PzLib.getSceneCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = PzLib.transformCoordsSpace(
                    obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                    coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = PzLib.transformCoordsSpace(
                    obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                    coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = PzLib.transformCoordsSpace(
                    obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                    coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = PzLib.transformEulerV3dToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = PzLib.RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = PzLib.transformCoordsSpace(obj[mode].clone(),
                'Y_UP_RIGHT', coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}

// setObjTransform puzzle
function setObjTransform(objSelector, isWorldSpace, mode, vector, offset){
    var x = vector[0];
      var y = vector[1];
      var z = vector[2];

    var objNames = PzLib.retrieveObjectNames(objSelector);

    function setObjProp(obj, prop, val) {
        if (!offset) {
            obj[mode][prop] = val;
        } else {
            if (mode != "scale")
                obj[mode][prop] += val;
            else
                obj[mode][prop] *= val;
        }
    }

    var inputsUsed = _pGlob.vec3Tmp.set(Number(x !== ''), Number(y !== ''),
            Number(z !== ''));
    var coords = _pGlob.vec3Tmp2.set(x || 0, y || 0, z || 0);

    if (mode === 'rotation') {
        // rotations are specified in degrees
        coords.multiplyScalar(v3d.MathUtils.DEG2RAD);
    }

    var coordSystem = PzLib.getSceneCoordSystem();

    PzLib.transformCoordsSpace(inputsUsed, coordSystem, 'Y_UP_RIGHT', true);
    PzLib.transformCoordsSpace(coords, coordSystem, 'Y_UP_RIGHT', mode === 'scale');

    for (var i = 0; i < objNames.length; i++) {

        var objName = objNames[i];
        if (!objName) continue;

        var obj = PzLib.getObjectByName(objName);
        if (!obj) continue;

        if (isWorldSpace && obj.parent) {
            obj.matrixWorld.decomposeE(obj.position, obj.rotation, obj.scale);

            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

            obj.matrixWorld.composeE(obj.position, obj.rotation, obj.scale);
            obj.matrix.multiplyMatrices(_pGlob.mat4Tmp.copy(obj.parent.matrixWorld).invert(), obj.matrixWorld);
            obj.matrix.decompose(obj.position, obj.quaternion, obj.scale);

        } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
            // Blender/Max coordinates

            // need all the rotations for order conversions, especially if some
            // inputs are not specified
            var euler = PzLib.transformEulerV3dToBlenderShortest(obj.rotation,
                    _pGlob.eulerTmp);
            PzLib.transformCoordsSpace(euler, coordSystem, 'Y_UP_RIGHT');

            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            /**
             * convert from Blender/Max default XYZ extrinsic order to v3d XYZ
             * intrinsic with reversion (XYZ -> ZYX) and axes swizzling (ZYX -> YZX)
             */
            euler.order = "YZX";
            euler.reorder(obj.rotation.order);
            obj.rotation.copy(euler);

        } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
            // Maya coordinates

            // Use separate rotation interface to fix ambiguous rotations for Maya,
            // might as well do the same for Blender/Max.

            var rotUI = PzLib.RotationInterface.initObject(obj);
            var euler = rotUI.getUserRotation(_pGlob.eulerTmp);
            // TODO(ivan): this probably needs some reasonable wrapping
            if (inputsUsed.x) euler.x = offset ? euler.x + coords.x : coords.x;
            if (inputsUsed.y) euler.y = offset ? euler.y + coords.y : coords.y;
            if (inputsUsed.z) euler.z = offset ? euler.z + coords.z : coords.z;

            rotUI.setUserRotation(euler);
            rotUI.getActualRotation(obj.rotation);
        } else {
            if (inputsUsed.x) setObjProp(obj, "x", coords.x);
            if (inputsUsed.y) setObjProp(obj, "y", coords.y);
            if (inputsUsed.z) setObjProp(obj, "z", coords.z);

        }

        obj.updateMatrixWorld(true);
    }

}

// autoRotateCamera puzzle
function autoRotateCamera(enabled, speed) {

    if (appInstance.controls && appInstance.controls instanceof v3d.OrbitControls) {
        appInstance.controls.autoRotate = enabled;
        appInstance.controls.autoRotateSpeed = speed;
    } else {
        console.error('autorotate camera: Wrong controls type');
    }
}

// setTimer puzzle
function registerSetTimer(id, timeout, callback, repeat) {

    if (id in _pGlob.intervalTimers) {
        window.clearInterval(_pGlob.intervalTimers[id]);
    }

    _pGlob.intervalTimers[id] = window.setInterval(function() {
        if (repeat-- > 0) {
            callback(_pGlob.intervalTimers[id]);
        }
    }, 1000 * timeout);
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    PzLib.initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);
            var objNames = PzLib.retrieveObjectNames(objSelector);

            if (PzLib.isObjectAmongObjects(objName, objNames)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = PzLib.getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = PzLib.getMaterialEditableValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// loadMedia puzzle
function loadMedia_WebAudio(url) {
    if (!v3d.Detector.checkWebAudio()) {
        if (!_pGlob.noWebAudioReported) {
            _pGlob.noWebAudioReported = true;
            console.warn('puzzles: Web Audio API not supported');
        }
        return null;
    }

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new PzLib.AudioWebAudio().load(url);
    }
    return elems[url];
}

// volume puzzle
function volume(mediaElem, volume) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);

    volume = Number(volume);
    if (Number.isNaN(volume)) {
        return;
    }

    mediaElems.forEach(mediaElem => {
        mediaElem.setVolume(v3d.MathUtils.clamp(volume, 0.0, 1.0));
    });
}

// playSound puzzle
function playSound(mediaElem, loop) {
    const mediaElems = (Array.isArray(mediaElem) ? mediaElem : [mediaElem]).filter(elem => elem);
    mediaElems.forEach(mediaElem => {
        mediaElem.setLoop(loop);
        mediaElem.play();
    });
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = PzLib.getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;

        PzLib.bindListener(elem, eventType, callback);
    }
}

// getAnimations puzzle
function getAnimations(objSelector) {
    const objNames = PzLib.retrieveObjectNames(objSelector);

    const animations = [];
    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        const action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished)) {
            PzLib.bindListener(appInstance.mixer, 'finished', onMixerFinished);
        }
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = PzLib.getSceneByAction(action);
                var frameRate = PzLib.getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = PzLib.getSceneByAction(action);
            var frameRate = PzLib.getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// animateParam puzzle
function tweenUpdateCb() {
    PzLib.Tween.update();
}
appInstance.renderCallbacks.push(tweenUpdateCb);
if (PL.editorRenderCallbacks)
    PL.editorRenderCallbacks.push([appInstance, tweenUpdateCb]);

// animateParam puzzle
_pGlob.animateParamUpdate = 0;
_pGlob.animateParamTweenInstance = {};

function animateParam(from, to, duration, easing, easing2, repeat, yoyo, blockId, on_update, when_finished) {

    var mode = easing == "Linear" ?
        PzLib.Tween.Easing.Linear.None : PzLib.Tween.Easing[easing][easing2];

    var tweenObject = (typeof from != "number");

    if (!tweenObject) { // number
        from = [from];
        to = [to];
    }

    const tween = new PzLib.Tween.Tween(from)
                    .to(to, duration * 1000)
                    .easing(mode)
                    .repeat(repeat)
                    .yoyo(yoyo)
                    .onUpdate(function (object) {
                        if (tweenObject)
                            _pGlob.animateParamUpdate = object;
                        else // number
                            _pGlob.animateParamUpdate = object[0];
                        on_update();
                    })
                    .onComplete(function (object) {
                        when_finished();
                    })
                    .start();

    _pGlob.animateParamTweenInstance[blockId] = tween;
}

// arHitPoint puzzle
function arHitPoint(coord) {

    if (!_pGlob.arHitPoint) {
        if (coord == 'xyz')
            return [0, 0, 0];
        else
            return 0;
    }

    var hitPoint = PzLib.transformCoordsSpace(_pGlob.vec3Tmp.copy(_pGlob.arHitPoint),
            'Y_UP_RIGHT', PzLib.getSceneCoordSystem());

    if (coord == 'xyz')
        return hitPoint.toArray();
    else
        return hitPoint[coord];
}

// setObjDirection puzzle
function setObjDirection(objSelector, vector, isPoint, lockUp) {
    var objNames = PzLib.retrieveObjectNames(objSelector);
    var x = vector[0] || 0;
      var y = vector[1] || 0;
      var z = vector[2] || 0;

    var coords = PzLib.transformCoordsSpace(_pGlob.vec3Tmp.set(x, y, z),
            PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = PzLib.getObjectByName(objName);
        if (!obj) continue;

        if (!isPoint) {
            coords.normalize().add(obj.position);
        }

        if (lockUp) {
            // NOTE: partially copy-pasted from LockedTrackConstraint

            var targetWorldPos = new v3d.Vector3(coords.x, coords.y, coords.z);

            var lockDir = new v3d.Vector3(0, 1, 0);

            if (obj.isCamera || obj.isLight)
                var trackDir = new v3d.Vector3(0, 0, -1);
            else
                var trackDir = new v3d.Vector3(0, 0, 1);

            var projDir = new v3d.Vector3();
            var plane = _pGlob.planeTmp;

            var objWorldPos = new v3d.Vector3();
            objWorldPos.setFromMatrixPosition(obj.matrixWorld);

            plane.setFromNormalAndCoplanarPoint(lockDir, objWorldPos);
            plane.projectPoint(targetWorldPos, projDir).sub(objWorldPos);

            var sign = _pGlob.vec3Tmp2.crossVectors(trackDir, projDir).dot(lockDir) > 0 ? 1 : -1;

            obj.setRotationFromAxisAngle(plane.normal, sign * trackDir.angleTo(projDir));

            if (obj.parent) {
                obj.parent.matrixWorld.decompose(_pGlob.vec3Tmp2, _pGlob.quatTmp, _pGlob.vec3Tmp2);
                obj.quaternion.premultiply(_pGlob.quatTmp.invert());
            }

        } else {

            obj.lookAt(coords.x, coords.y, coords.z);

        }

        obj.updateMatrixWorld(true);
    }
}

// arHitTest puzzle
_pGlob.arHitPoint = new v3d.Vector3(0, 0, 0);
_pGlob.arHitNormal = new v3d.Vector3(0, 0, 0);

function arHitTest(cbHit, cbMiss, smooth) {
    appInstance.renderer.xr.arHitTest(0, 0, function(point, normal) {

        smooth = v3d.MathUtils.clamp(smooth, 0, 1);

        var x = point.x;
        var y = point.y;
        var z = point.z;

        _pGlob.arHitPoint.x = _pGlob.arHitPoint.x * smooth + (1 - smooth) * x;
        _pGlob.arHitPoint.y = _pGlob.arHitPoint.y * smooth + (1 - smooth) * y;
        _pGlob.arHitPoint.z = _pGlob.arHitPoint.z * smooth + (1 - smooth) * z;

        _pGlob.arHitNormal.lerpVectors(normal, _pGlob.arHitNormal, smooth);

        cbHit();
    }, cbMiss);
}

// createVector puzzle
function createVector(x, y, z) {
    return [x, y, z];
};

// updateTextObject puzzle
function updateTextObj(objSelector, text) {
    const objNames = PzLib.retrieveObjectNames(objSelector);

    for (let i = 0; i < objNames.length; i++) {
        const objName = objNames[i];
        if (!objName) continue;
        const obj = PzLib.getObjectByName(objName);
        if (!obj || !obj.geometry || !obj.geometry.cloneWithText)
            continue;
        const textGeom = obj.geometry;
        obj.geometry = textGeom.cloneWithText(String(text));
        textGeom.dispose();
    }
}

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = PzLib.transformCoordsSpace(worldPos,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = PzLib.getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = PzLib.transformCoordsSpace(worldTarget,
                PzLib.getSceneCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = PzLib.getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// enterARMode puzzle
function enterARMode(refSpace, allowHTML, enterCb, exitCb, unAvailableCb) {

    switch (refSpace) {
        case 'SITTING':
            var referenceSpace = 'local-floor';
            break;
        case 'WALKING':
            var referenceSpace = 'unbounded';
            break;
        case 'ORIGIN':
            var referenceSpace = 'local';
            break;
        case 'ROOM':
            var referenceSpace = 'bounded-floor';
            break;
        case 'VIEWER':
            var referenceSpace = 'viewer';
            break;
        default:
            console.error('puzzles: Wrong VR reference space');
            return;
    }


    appInstance.initWebXR('immersive-ar', referenceSpace, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            PzLib.bindListener(controller, 'select', PzLib.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                PzLib.bindListener(controller, pair[0], pair[1]);
            });
        }

        _pGlob.xrSessionAcquired = true;

        enterCb();

    }, unAvailableCb, function() {

        var controllers = appInstance.xrControllers;

        for (var i = 0; i < controllers.length; i++) {
            var controller = controllers[i];

            PzLib.unbindListener(controller, 'select', PzLib.xrOnSelect);

            _pGlob.xrSessionCallbacks.forEach(function(pair) {
                PzLib.unbindListener(controller, pair[0], pair[1]);
            });
        }

        _pGlob.xrSessionAcquired = false;

        // to cleanup supplementary XR_CAMERA_CONTROL_OBJECT
        _pGlob.objCache = {};

        exitCb();

    }, { domOverlay: allowHTML });
}

// exportToUSDZ puzzle
function exportToUSDZ(objSelector) {
    let obj;

    if (objSelector === '' || objSelector === PzLib.LIST_NONE)
        obj = appInstance.scene;
    else
        obj = PzLib.getObjectByName(objSelector);

    if (!obj)
        return;

    // COMPAT: iOS < 14
    if (Blob.prototype.arrayBuffer == undefined)
        Blob.prototype.arrayBuffer = function() {
            return new Response(this).arrayBuffer()
        }

    const usdzExporter = new v3d.USDZExporter();

    return new Promise(function(resolve, reject) {

        usdzExporter.parse(obj).then(function(value) {

            const dataUrl = URL.createObjectURL(new Blob([value], { type: 'application/octet-stream' }));
            resolve(dataUrl);

        }, function(reason) {

            console.error('exportToUSDZ: export failed: ' + reason);
            reject(reason);

        });

    });

}

// checkARMode puzzle
function checkARMode(availableCb, usdzCb, unAvailableCb) {
    v3d.Detector.checkWebXR('immersive-ar', availableCb, function() {
        let usdzSupported = false;

        // NOTE: WebView in iOS reports as unsupported, use whitelist
        if (v3d.Detector.checkIOS() && window.webkit && window.webkit.messageHandlers) {
            if (/CriOS|EdgiOS|FxiOS|GSA|DuckDuckGo/.test(navigator.userAgent))
                usdzSupported = true;
        } else {
            const a = document.createElement('a');
            if (a.relList.supports('ar'))
                usdzSupported = true;
        }

        if (usdzSupported)
            usdzCb();
        else
            unAvailableCb();
    });
}

const intersectPlaneCSS = (() => {
    const coords = new v3d.Vector2();
    const rc = new v3d.Raycaster(); // always check visibility

    return (plane, cssX, cssY, dest) => {
        coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
        coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
        rc.setFromCamera(coords, appInstance.getCamera(true));
        return rc.ray.intersectPlane(plane, dest);
    };
})();

// dragMoveAdv puzzle
const dragMoveAdv = (() => {
    _pGlob.dragMoveOrigins = _pGlob.dragMoveOrigins || {};

    // Blender/Max right-handed -> Verge3D right-handed
    const Z_UP_RIGHT_COORDS = Object.freeze({
        X: _pGlob.AXIS_X,
        Y: _pGlob.AXIS_Z,
        Z: _pGlob.AXIS_Y,
    });

    // Blender/Max right-handed -> Verge3D right-handed with a camera parent
    const Z_UP_RIGHT_CAM_COORDS = Object.freeze({
        X: _pGlob.AXIS_X,
        Y: _pGlob.AXIS_Y,
        Z: _pGlob.AXIS_Z,
    });

    // Maya right-handed -> Verge3D right-handed
    const Y_UP_RIGHT_COORDS = Object.freeze({
        X: _pGlob.AXIS_X,
        Y: _pGlob.AXIS_Y,
        Z: _pGlob.AXIS_Z,
    });

    const draggedObjPosWorld = new v3d.Vector3();
    const dragAxisWorld = new v3d.Vector3(); // only for the X, Y and Z modes
    const dragPlaneNorWorld = new v3d.Vector3();
    const dragPlane = new v3d.Plane();
    const intersectPoint0 = new v3d.Vector3();
    const intersectPoint1 = new v3d.Vector3();
    const dragDelta = new v3d.Vector3();
    const parentMatWorldInv = new v3d.Matrix3();

    return (objSelector, mode, spaceType, blockId, parentDragOverBlockId) => {
        const camera = appInstance.getCamera();
        if (!camera) return;

        if (!_pGlob.objDragOverInfoByBlock) return;

        const objNames = PzLib.retrieveObjectNames(objSelector);

        const info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
        if (!info) return;

        const draggedObj = PzLib.getObjectByName(info.draggedObjName);
        if (!draggedObj) return;

        if (!(blockId in _pGlob.dragMoveOrigins)) {
            _pGlob.dragMoveOrigins[blockId] = [];
        }
        const posOrigins = _pGlob.dragMoveOrigins[blockId];
        const lenDiff = objNames.length - posOrigins.length;
        for (let i = 0; i < lenDiff; i++) {
            posOrigins.push(new v3d.Vector3());
        }

        for (let i = 0; i < objNames.length; i++) {
            const obj = PzLib.getObjectByName(objNames[i]);
            if (!obj) continue;

            const posOrigin = posOrigins[i];
            if (!info.isMoved) {
                // the object position before the first move is used as an initial value
                posOrigin.copy(obj.position);
            }

            const isZupRight = PzLib.getSceneCoordSystem() === 'Z_UP_RIGHT';
            const needParentCamCoords = obj.parent && obj.parent.isCamera
                    && spaceType === 'PARENT';
            const coords = isZupRight
                    ? (needParentCamCoords ? Z_UP_RIGHT_CAM_COORDS : Z_UP_RIGHT_COORDS)
                    : Y_UP_RIGHT_COORDS;

            const isMode1d = mode === 'X' || mode === 'Y' || mode === 'Z';
            const isMode2d = mode === 'XY' || mode === 'XZ' || mode === 'YZ';
            const isMode3d = mode === 'XYZ';

            // determining the normal for the drag plane to raycast against
            if (isMode1d) {

                dragAxisWorld.copy(coords[mode]);

                if (spaceType === 'LOCAL') {
                    dragAxisWorld.transformDirection(obj.matrixWorld);
                } else if (spaceType === 'PARENT') {
                    dragAxisWorld.transformDirection(obj.parent.matrixWorld);
                } else {
                    // considered to be in the world space, no need for transforming
                }

                camera.getWorldDirection(dragPlaneNorWorld);
                dragPlaneNorWorld.cross(dragAxisWorld).cross(dragAxisWorld);

            } else if (isMode2d) {

                const modeNormal = mode === 'XY' ? 'Z' : (mode === 'XZ' ? 'Y' : 'X');
                dragPlaneNorWorld.copy(coords[modeNormal]);

                if (spaceType === 'LOCAL') {
                    dragPlaneNorWorld.transformDirection(obj.matrixWorld);
                } else if (spaceType === 'PARENT') {
                    dragPlaneNorWorld.transformDirection(obj.parent.matrixWorld);
                } else {
                    // considered to be in the world space, no need for transforming
                }

            } else {

                camera.getWorldDirection(dragPlaneNorWorld);

            }

            draggedObj.getWorldPosition(draggedObjPosWorld);
            dragPlane.setFromNormalAndCoplanarPoint(dragPlaneNorWorld, draggedObjPosWorld);

            const res0 = intersectPlaneCSS(dragPlane, info.downX, info.downY,
                    intersectPoint0);
            const res1 = intersectPlaneCSS(dragPlane, info.currX, info.currY,
                    intersectPoint1);

            if (res0 !== null && res1 !== null) {
                dragDelta.subVectors(intersectPoint1, intersectPoint0);
                if (isMode1d) {
                    dragDelta.projectOnVector(dragAxisWorld);
                }

                parentMatWorldInv.setFromMatrix4(obj.parent.matrixWorld).invert();
                dragDelta.applyMatrix3(parentMatWorldInv);
                obj.position.addVectors(posOrigin, dragDelta);
            }

            obj.updateMatrixWorld(true);
        }
    };
})();

// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

PzLib.initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = PzLib.getObjectName(obj);

            if (PzLib.isObjectAmongObjects(objName, [el.objName])) {
                el.callback({
                    downEvent: downEvent,
                    draggedObjName: objName,
                    downPointWorld: intersects[i].point,
                });
            }

        }

    });

}, 'mousedown', true);

// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = PzLib.createDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = PzLib.getEventFirstTouchId(cbParam.downEvent);
        var coords = PzLib.getEventOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;
        info.downPointWorld.copy(cbParam.downPointWorld);

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!PzLib.isChangedTouchOrNotTouchEventAtAll(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = PzLib.getEventOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!PzLib.isChangedTouchOrNotTouchEventAtAll(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = PzLib.getEventOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            PzLib.unbindListener(elem, 'mousemove', moveCb);
            PzLib.unbindListener(elem, 'touchmove', moveCb);
            PzLib.unbindListener(elem, 'mouseup', upCb);
            PzLib.unbindListener(elem, 'touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        PzLib.bindListener(elem, 'mousemove', moveCb);
        PzLib.bindListener(elem, 'touchmove', moveCb);
        PzLib.bindListener(elem, 'mouseup', upCb);
        PzLib.bindListener(elem, 'touchend', upCb);
    }

    var objNames = PzLib.retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}

// dragRotateAdv puzzle
const dragRotateAdv = (() => {

    // Blender/Max right-handed -> Verge3D right-handed
    const Z_UP_RIGHT_COORDS = Object.freeze({
        X: _pGlob.AXIS_X,
        Y: _pGlob.AXIS_Z,
        Z: _pGlob.AXIS_Y,
    });

    // Blender/Max right-handed -> Verge3D right-handed with a camera parent
    const Z_UP_RIGHT_CAM_COORDS = Object.freeze({
        X: _pGlob.AXIS_X,
        Y: _pGlob.AXIS_Y,
        Z: _pGlob.AXIS_Z,
    });

    // Maya right-handed -> Verge3D right-handed
    const Y_UP_RIGHT_COORDS = Object.freeze({
        X: _pGlob.AXIS_X,
        Y: _pGlob.AXIS_Y,
        Z: _pGlob.AXIS_Z,
    });

    const axisVec = new v3d.Vector3();
    const axisVecLocal = new v3d.Vector3();

    const objQuatWorld = new v3d.Quaternion();
    const objQuatWorldConj = new v3d.Quaternion();
    const parentQuatWorld = new v3d.Quaternion();

    const objPosWorld = new v3d.Vector3();
    const axisLineEndPoint = new v3d.Vector3();
    const axisLine = new v3d.Line3();
    const downPointProjOnLine = new v3d.Vector3();

    const rotationPoint = new v3d.Vector3();
    const vecPointerFrom = new v3d.Vector2();
    const vecPointerTo = new v3d.Vector2();

    const viewVec = new v3d.Vector3();

    const rotationQuat = new v3d.Quaternion();

    return (objSelector, mode, spaceType, blockId, parentDragOverBlockId) => {

        const camera = appInstance.getCamera(true);
        if (!camera) return;

        if (!_pGlob.objDragOverInfoByBlock) return;
        const info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
        if (!info) return;

        const appWidth = appInstance.getWidth();
        const appHeight = appInstance.getHeight();

        const isZupRight = PzLib.getSceneCoordSystem() === 'Z_UP_RIGHT';

        const objNames = PzLib.retrieveObjectNames(objSelector);

        for (let i = 0; i < objNames.length; i++) {
            const obj = PzLib.getObjectByName(objNames[i]);
            if (!obj) continue;

            obj.getWorldQuaternion(objQuatWorld);

            const needParentCamCoords = obj.parent && obj.parent.isCamera
                    && spaceType === 'PARENT';
            const coords = isZupRight
                    ? (needParentCamCoords ? Z_UP_RIGHT_CAM_COORDS : Z_UP_RIGHT_COORDS)
                    : Y_UP_RIGHT_COORDS;
            axisVec.copy(coords[mode]);
            if (spaceType === 'LOCAL') {
                axisVec.applyQuaternion(objQuatWorld);
            } else if (spaceType === 'PARENT') {
                obj.parent.getWorldQuaternion(parentQuatWorld);
                axisVec.applyQuaternion(parentQuatWorld);
            } else {
                // considered to be in the world space, no need for transforming
            }

            obj.getWorldPosition(objPosWorld);

            axisLineEndPoint.addVectors(objPosWorld, axisVec);
            axisLine.set(objPosWorld, axisLineEndPoint);
            axisLine.closestPointToPoint(info.downPointWorld, false, downPointProjOnLine);

            rotationPoint.copy(downPointProjOnLine);
            rotationPoint.project(camera);

            const rotX = (rotationPoint.x + 1) / 2 * appWidth;
            const rotY = (-rotationPoint.y + 1) / 2 * appHeight;

            vecPointerFrom.set(info.prevX - rotX, info.prevY - rotY);
            vecPointerTo.set(info.currX - rotX, info.currY - rotY);

            objQuatWorldConj.copy(objQuatWorld).conjugate();
            axisVecLocal.copy(axisVec).applyQuaternion(objQuatWorldConj).normalize();

            /**
             * Negated in order to keep the rotation direction consistent with
             * mouse movement after transforming coordinates from the NDC space
             * to the canvas space.
             */
            let rotAngle = -(vecPointerTo.angle() - vecPointerFrom.angle());

            /**
             * Negated if the rotation axis points outwards the camera. Not
             * needed and can have issues for objects parented to camera.
             */
            if (!needParentCamCoords) {
                camera.getWorldDirection(viewVec);
                if (viewVec.dot(axisVec) > 0) {
                    rotAngle = -rotAngle;
                }
            }

            rotationQuat.setFromAxisAngle(axisVecLocal, rotAngle);

            obj.quaternion.multiply(rotationQuat);
            obj.updateMatrixWorld(true);
        }
    };
})();

// dragScale puzzle
_pGlob.dragScaleOrigins = {};

function dragScale(objSelector, mode, blockId, parentDragOverBlockId) {
    const camera = appInstance.getCamera(true);
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    const objNames = PzLib.retrieveObjectNames(objSelector);

    const info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    if (!(blockId in _pGlob.dragScaleOrigins)) {
        _pGlob.dragScaleOrigins[blockId] = [];
    }
    const scaleOrigins = _pGlob.dragScaleOrigins[blockId];
    let lenDiff = objNames.length - scaleOrigins.length;
    for (let i = 0; i < lenDiff; i++) {
        scaleOrigins.push(new v3d.Vector3());
    }

    const coordSystem = PzLib.getSceneCoordSystem();

    for (let i = 0; i < objNames.length; i++) {
        const obj = PzLib.getObjectByName(objNames[i]);

        if (!obj) {
            continue;
        }

        const scaleOrigin = scaleOrigins[i];

        if (!info.isMoved) {
            // the object scale before the first move is used as an initial value
            scaleOrigin.copy(obj.scale);
        }

        const objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
        objPos.project(camera);

        let objX = (objPos.x + 1) / 2 * appInstance.getWidth();
        let objY = (-objPos.y + 1) / 2 * appInstance.getHeight();

        const vecFrom = _pGlob.vec2Tmp.set(info.downX - objX, objY - info.downY);
        const vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

        if (mode == "X" || mode == "Y" || mode == "Z") {
            let coord;
            if (coordSystem == 'Z_UP_RIGHT')
                coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            else
                coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");

            obj.scale[coord] = Math.max(scaleOrigin[coord]
                    * vecTo.dot(vecFrom) / vecFrom.lengthSq(), _pGlob.MIN_DRAG_SCALE);
            obj.updateMatrixWorld(true);

        }  else if (mode == 'XYZ') {
            const minVecDragScale = _pGlob.vec3Tmp2.setScalar(_pGlob.MIN_DRAG_SCALE);
            let scaleFactor = vecTo.dot(vecFrom) / vecFrom.lengthSq();
            obj.scale.copy(scaleOrigin).multiplyScalar(scaleFactor).max(minVecDragScale);
            obj.updateMatrixWorld(true);
        }
    }
}

// toFixedPoint puzzle
function toFixedPoint(num, prec) {
    prec = Math.pow(10, prec);
    return Math.round(num * prec)/prec;
}


addHTMLElement('div', 'add_msg', 'TO', ['CONTAINER'], false);
setHTMLElemAttribute('className', 'add_msg', 'add_msg', false);

Function('app', 'v3d', 'puzzles', 'VARS', 'PROC', (('let msg = `<style>' + '\n' +
'    .button_container {' + '\n' +
'        display: grid;' + '\n' +
'        grid-template-columns: auto auto auto auto;' + '\n' +
'        grid-template-rows: 15vh 60vh 15vh;' + '\n' +
'        width: 70vw;' + '\n' +
'        margin: 5vh auto;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    .grid_item,' + '\n' +
'    .grid_item_1,' + '\n' +
'    .grid_item_2 {' + '\n' +
'        display: flex;' + '\n' +
'        justify-content: center;' + '\n' +
'        align-items: center;' + '\n' +
'        border: none;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    .grid_item_1 {' + '\n' +
'        grid-row-start: 3;' + '\n' +
'        grid-column-start: 2;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    .grid_item_2 {' + '\n' +
'        grid-row-start: 3;' + '\n' +
'        grid-column-start: 3;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    .img_button {' + '\n' +
'        width: 10vw;' + '\n' +
'        height: 10vw;' + '\n' +
'        border: none;' + '\n' +
'        background-color: transparent;' + '\n' +
'        cursor: pointer;' + '\n' +
'        background-size: cover;' + '\n' +
'        background-position: center;' + '\n' +
'        background-repeat: no-repeat;' + '\n' +
'        display: block;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    .img_button:hover {' + '\n' +
'        filter: drop-shadow(0px 0px 5px rgb(0, 81, 255));' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    .img_button:active {' + '\n' +
'        transform: scale(0.8);' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    #w_1 {' + '\n' +
'        background-image: url(\'media/w_1.png\');' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    #w_2 {' + '\n' +
'        background-image: url(\'media/w_2.png\');' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    #w_3 {' + '\n' +
'        background-image: url(\'media/w_3.png\');' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    #w_4 {' + '\n' +
'        background-image: url(\'media/w_4.png\');' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    #edit_button {' + '\n' +
'        background-image: url(\'media/edit.svg\');' + '\n' +
'        display: flex;' + '\n' +
'    }' + '\n' +
'' + '\n' +
'    #object_place {' + '\n' +
'        background-image: url(\'media/drop.svg\');' + '\n' +
'        display: flex;' + '\n' +
'    }' + '\n' +
'</style>' + '\n' +
'    <div>' + '\n' +
'        <div class="button_container" id="button_container">' + '\n' +
'            <div class="grid_item"><button class="img_button" id="w_1"></button></div>' + '\n' +
'            <div class="grid_item"><button class="img_button" id="w_2"></button></div>' + '\n' +
'            <div class="grid_item"><button class="img_button" id="w_3"></button></div>' + '\n' +
'            <div class="grid_item"><button class="img_button" id="w_4"></button></div>' + '\n' +
'            <div class="grid_item_1"><button class="img_button" id="edit_button"></button></div>' + '\n' +
'            <div class="grid_item_2"><button class="img_button" id="object_place"></button></div>' + '\n' +
'        </div>' + '\n' +
'    </div>`;' + '\n' +
'    document.querySelector(".add_msg").innerHTML=msg;')))(appInstance, v3d, PL, VARS, PROC);

setHTMLElemStyle('display', 'none', 'button_container', false);

setHTMLElemStyle('display', 'flex', ['left-column', 'right-column', 'fullscreenButton'], true);

brightnessContrast(0.1, 0.28);
bloom(0.2, 0.1, 0.2);

if (featureAvailable('MOBILE')) {
  setObjTransform('Camera', true, 'position', getObjTransform('m_cam', true, 'position', 'xyz'), false);
}

registerSetTimer('myTimer', 7, function() {
  autoRotateCamera(true, 2);
}, Infinity);
registerOnClick(['ALL_OBJECTS'], false, false, [0,1,2], function() {
  autoRotateCamera(false, 2);
  registerSetTimer('myTimer', 7, function() {
    autoRotateCamera(true, 2);
  }, Infinity);
}, function() {});

changeVis(['GROUP', 'books'], true);
is_obj = true;
is_expo = false;

setMaterialValue('wood', 'cg_1', 0);
setMaterialValue('wood', 'cg_2', 0);

camera_pos = getObjTransform('Camera', true, 'position', 'xyz');

volume(loadMedia_WebAudio('./media/sound/pop.mp3'), 1);
volume(loadMedia_WebAudio('./media/sound/wood.wav'), 0.5);

eventHTMLElem('click', 'object_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);
  if (!is_expo) {
    if (is_obj) {
      changeVis(['GROUP', 'books'], false);
      setHTMLElemStyle('backgroundImage', 'url(\'media/show_obj.svg\')', 'object_button', true);
      is_obj = false;
    } else {
      changeVis(['GROUP', 'books'], true);
      setHTMLElemStyle('backgroundImage', 'url(\'media/hide_obj.svg\')', 'object_button', true);
      is_obj = true;
    }
  }
});

eventHTMLElem('click', 'explode_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/wood.wav'), false);
  if (!is_expo) {
    if (is_obj) {
      changeVis(['GROUP', 'books'], false);
      registerSetTimeout(0.5, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'bed_table']), 0, 50, 'LoopOnce', 1,
                function() {}, false);

            });
      is_obj = false;
    } else {

      operateAnimation('PLAY', getAnimations(['GROUP', 'bed_table']), 0, 50, 'LoopOnce', 1,
              function() {}, false);

          }
    setHTMLElemStyle('backgroundImage', 'url(\'media/show_obj.svg\')', 'object_button', true);
    setHTMLElemStyle('backgroundImage', 'url(\'media/unexplode.svg\')', 'explode_button', true);
    is_expo = true;
  } else {

    operateAnimation('PLAY', getAnimations(['GROUP', 'bed_table']), 0, 50, 'AUTO', 1,
            function() {
      setHTMLElemStyle('backgroundImage', 'url(\'media/explode.svg\')', 'explode_button', true);
      is_expo = false;
    }, true);

        }
});

is_ar = false;

eventHTMLElem('click', 'ar_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/wood.wav'), false);
  if (!is_ar) {
    if (is_expo) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'bed_table']), 0, 50, 'AUTO', 1,
              function() {
        setHTMLElemStyle('backgroundImage', 'url(\'media/explode.svg\')', 'explode_button', true);
        is_expo = false;
      }, true);

          }
    setHTMLElemStyle('display', 'block', 'enter_AR_button', true);
    setHTMLElemStyle('backgroundImage', 'url(\'media/screen.svg\')', 'ar_button', true);
    changeVis(['GROUP', 'd1'], false);
    is_ar = true;
  } else {
    setHTMLElemStyle('display', 'none', 'enter_AR_button', true);
    setHTMLElemStyle('backgroundImage', 'url(\'media/ar.svg\')', 'ar_button', true);
    changeVis(['GROUP', 'd1'], true);
    is_ar = false;
  }
});

ch_1 = 0;
ch_2 = 0;
ch_3 = 0;

eventHTMLElem('click', 'w_1', false, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 0, 0.5, 'Linear', 'InOut', 0, false, 'Iy-B+I[IpMhs8V4C.V8z',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 0;
  });


  animateParam(ch_2, 0, 0.5, 'Linear', 'InOut', 0, false, 'x}2}W8B/L~KfiP*v%@X{',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 0;
  });


  animateParam(ch_3, 0, 0.5, 'Linear', 'InOut', 0, false, 'sRGe4K;DT%PO1B?oX_ki',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0;
  });

      });
eventHTMLElem('click', 'w_2', false, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 1, 0.5, 'Linear', 'InOut', 0, false, '^_Md-oHYS%u^Z:(BQ!5~',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 1;
  });


  animateParam(ch_2, 0, 0.5, 'Linear', 'InOut', 0, false, ')J+n:D$9L~aD8{+oqG_}',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 0;
  });


  animateParam(ch_3, 0, 0.5, 'Linear', 'InOut', 0, false, 'B]8.1N4X![m:!8[%vGPo',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0;
  });

      });
eventHTMLElem('click', 'w_3', false, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 0, 0.5, 'Linear', 'InOut', 0, false, '=**={BUD$m$1+B~q=hEs',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 0;
  });


  animateParam(ch_2, 0.8, 0.5, 'Linear', 'InOut', 0, false, '?6,aWFdFL]R}Q!HUZ-bc',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 0.8;
  });


  animateParam(ch_3, 0.5, 0.5, 'Linear', 'InOut', 0, false, '~v`KH3EJjbgc!)hOJy3U',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0.5;
  });

      });
eventHTMLElem('click', 'w_4', false, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 1, 0.5, 'Linear', 'InOut', 0, false, 'T|Dp;lTEifMU*w.wZ73t',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 1;
  });


  animateParam(ch_2, 1, 0.5, 'Linear', 'InOut', 0, false, 'PYo:W-$,n{h=Lk`*TQg}',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 1;
  });


  animateParam(ch_3, 0.5, 0.5, 'Linear', 'InOut', 0, false, '#Z9GcY.6|Rx/WL|iArn~',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0.5;
  });

      });

eventHTMLElem('click', 'w_1_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 0, 0.5, 'Linear', 'InOut', 0, false, 'SY%rv(+FHID|*rB#IEH.',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 0;
  });


  animateParam(ch_2, 0, 0.5, 'Linear', 'InOut', 0, false, '_`FI.Rha4xo6KT.Y9iXz',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 0;
  });


  animateParam(ch_3, 0, 0.5, 'Linear', 'InOut', 0, false, 'bAmd+H?_?]8j?`*LOM;#',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0;
  });

      });
eventHTMLElem('click', 'w_2_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 1, 0.5, 'Linear', 'InOut', 0, false, '5xpnd(U:Mr8y1cHAb_uH',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 1;
  });


  animateParam(ch_2, 0, 0.5, 'Linear', 'InOut', 0, false, 'bPif!-2:VkAmpFN~o[}Q',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 0;
  });


  animateParam(ch_3, 0, 0.5, 'Linear', 'InOut', 0, false, '|I@$Ji#zrtBo?_%dKzey',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0;
  });

      });
eventHTMLElem('click', 'w_3_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 0, 0.5, 'Linear', 'InOut', 0, false, 'nI|K2MuQ_xnJC]H/qxOU',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 0;
  });


  animateParam(ch_2, 0.8, 0.5, 'Linear', 'InOut', 0, false, 'UXE8==?Pa=G*Rx_:~7lN',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 0.8;
  });


  animateParam(ch_3, 0.5, 0.5, 'Linear', 'InOut', 0, false, 'RI;D2^:CKzU}?gxJ91bY',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0.5;
  });

      });
eventHTMLElem('click', 'w_4_button', true, function(event) {
  playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);

  animateParam(ch_1, 1, 0.5, 'Linear', 'InOut', 0, false, 'dQly#h]qg)[ALG.LY^FV',
      function() {
    setMaterialValue('wood', 'cg_1', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_1 = 1;
  });


  animateParam(ch_2, 1, 0.5, 'Linear', 'InOut', 0, false, 'R3I5S*]/p(oL_Gm4S*Yi',
      function() {
    setMaterialValue('wood', 'cg_2', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_2 = 1;
  });


  animateParam(ch_3, 0.5, 0.5, 'Linear', 'InOut', 0, false, '4:BCN+!,=.D+V52fHNZx',
      function() {
    setMaterialValue('ico', 'ch_3', _pGlob.animateParamUpdate || 0);
  },
      function() {
    ch_3 = 0.5;
  });

      });

is_placeable = true;

mode = 'indicator';
// Check AR capabilities
checkARMode(function() {
  // Enter AR!
  eventHTMLElem('pointerup', 'enter_AR_button', true, function(event) {
    enterARMode('ORIGIN', true, function() {
      changeVis(['GROUP', 'bed_table'], false);
      changeVis('prompt_move_around', true);
      arHitTest(function() {
        if (mode == 'indicator') {
          changeVis('ok_button', true);
          changeVis(['GROUP', 'indicator_group'], true);
          setObjTransform('indicator_invis_plane', false, 'position', [arHitPoint('x'), arHitPoint('y'), arHitPoint('z')], false);
          // Look at me!
          setObjDirection('indicator_invis_plane', getObjTransform('Camera', false, 'position', 'xyz'), true, true);
        }
        changeVis('prompt_move_around', false);
      }, function() {
        changeVis(['GROUP', 'indicator_group'], false);
      }, 0.7);
      setHTMLElemStyle('display', 'none', 'enter_AR_button', true);
      changeVis(['drag_move', 'drag_rotate', 'drag_scale', 'ready_button'], false);
    }, function() {
      changeVis(['GROUP', 'bed_table'], true);
      changeVis('prompt_move_around', false);
      changeVis(['GROUP', 'indicator_group'], false);
      changeVis(['GROUP', 'd1'], true);
      setObjTransform('Bed Table', false, 'position', createVector(0, 0, 0), false);
      // Look at me!
      setObjDirection('Bed Table', getObjTransform('Camera', false, 'position', 'xyz'), true, true);
      changeVis(['edit_button', 'ready_button', 'drag_move', 'drag_rotate', 'drag_scale', 'scale_percentage', 'ok_button'], false);
      setObjTransform('Bed Table', false, 'scale', [1, 1, 1], false);
      updateTextObj('scale_percentage', '100%');
      tweenCamera(camera_pos, 'book_shelf', 1, function() {}, 0);
      setHTMLElemStyle('backgroundImage', 'url(\'media/ar.svg\')', 'ar_button', true);
      setHTMLElemStyle('display', 'none', 'button_container', false);
      is_ar = false;
    }, function() {
      setHTMLElemStyle('display', 'block', 'warning_could_not_enter_AR', true);
      registerSetTimeout(3, function() {
        setHTMLElemStyle('display', 'none', 'warning_could_not_enter_AR', true);
      });
    });
  });
}, function() {
  setHTMLElemAttribute('href', exportToUSDZ('book_1'), 'enter_AR_button', true);
  setHTMLElemAttribute('rel', 'ar', 'enter_AR_button', true);
  setHTMLElemAttribute('download', 'farmer.usdz', 'enter_AR_button', true);
}, function() {
  // Enter AR!
  eventHTMLElem('pointerup', 'enter_AR_button', true, function(event) {
    setHTMLElemStyle('display', 'block', 'warning_AR_unavailable', true);
    setHTMLElemStyle('display', 'none', 'enter_AR_button', true);
    setHTMLElemStyle('backgroundImage', 'url(\'media/ar.svg\')', 'ar_button', true);
    changeVis(['GROUP', 'd1'], true);
    is_ar = false;
    registerSetTimeout(3, function() {
      setHTMLElemStyle('display', 'none', 'warning_AR_unavailable', true);
    });
  });
});
// Position the character
registerOnClick('ok_button', false, false, [0,1,2], function() {
  if (is_placeable) {
    changeVis(['GROUP', 'bed_table'], true);
    changeVis(['drag_move', 'drag_rotate', 'drag_scale', 'scale_percentage', 'ready_button'], false);
    setObjTransform('Bed Table', false, 'position', getObjTransform('indicator_invis_plane', false, 'position', 'xyz'), false);
    // Look at me!
    setObjDirection('Bed Table', getObjTransform('Camera', false, 'position', 'xyz'), true, true);
    setHTMLElemStyle('display', 'grid', 'button_container', false);
    setMaterialValue('indicator', 'indicator_plane', 1);
    mode = 'placed';
    is_placeable = false;
    changeVis('ok_button', false);
  }
}, function() {});

registerOnDrag('drag_move', false, [0,1,2], function() {}, function() {
  dragMoveAdv('Bed Table', 'XY', 'WORLD', '8o8nOyTtkWq?W_SQs-|_', 'G1ye9@dbVWAx+dC?wdwk');
}, function() {}, 'G1ye9@dbVWAx+dC?wdwk');

registerOnDrag('drag_rotate', false, [0,1,2], function() {}, function() {
  dragRotateAdv('Bed Table', 'Z', 'WORLD', ';V@_mj~C6#6st}%|L2fM', 'zs{d~:/oJ6OM9r)o6R,C');
}, function() {}, 'zs{d~:/oJ6OM9r)o6R,C');

registerOnDrag('drag_scale', false, [0,1,2], function() {}, function() {
  dragScale('Bed Table', 'Z', '!m;X%nzGL9gqF6*2@x_7', 'WLYxwe*;^db}c?brtmU5');
  dragScale('Bed Table', 'X', '7Ila8yLKn=*PF~GVAC5?', 'WLYxwe*;^db}c?brtmU5');
  dragScale('Bed Table', 'Y', 'b;DQ|a30Sv-+Lq$dcj.H', 'WLYxwe*;^db}c?brtmU5');
  updateTextObj('scale_percentage', String(Math.round(toFixedPoint(getObjTransform('Bed Table', false, 'scale', 'z'), 2) * 100)) + '%');
}, function() {}, 'WLYxwe*;^db}c?brtmU5');

registerOnClick('ready_button', false, false, [0,1,2], function() {
  registerSetTimeout(0.1, function() {
    changeVis(['drag_move', 'drag_rotate', 'drag_scale', 'ready_button', 'scale_percentage'], false);
    setHTMLElemStyle('display', 'grid', 'button_container', false);
    mode = 'placed';
    playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);
  });
}, function() {});
eventHTMLElem('click', 'edit_button', false, function(event) {
  registerSetTimeout(0.1, function() {
    changeVis(['drag_move', 'drag_rotate', 'drag_scale', 'ready_button', 'scale_percentage'], true);
    setHTMLElemStyle('display', 'none', 'button_container', false);
    mode = 'edit';
    playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);
  });
});

eventHTMLElem('click', 'object_place', false, function(event) {
  is_placeable = true;
  registerSetTimeout(0.1, function() {
    changeVis('ok_button', true);
    changeVis(['GROUP', 'bed_table'], false);
    changeVis(['drag_move', 'drag_rotate', 'drag_scale', 'scale_percentage', 'ready_button'], false);
    setHTMLElemStyle('display', 'none', 'button_container', false);
    mode = 'indicator';
    setMaterialValue('indicator', 'indicator_plane', 0.8);
    playSound(loadMedia_WebAudio('./media/sound/pop.mp3'), false);
  });
});

arHitPoint('z');

arHitPoint('y');

arHitPoint('x');

registerOnClick('Bed Table', false, false, [0,1,2], function() {
  playSound(loadMedia_WebAudio('./media/sound/wood.wav'), false);

  operateAnimation('PLAY', getAnimations(['GROUP', 'bed_table']), 0, 50, 'LoopOnce', 1,
          function() {
    registerSetTimeout(3, function() {
      playSound(loadMedia_WebAudio('./media/sound/wood.wav'), false);

      operateAnimation('PLAY', getAnimations(['GROUP', 'bed_table']), 1, 50, 'LoopRepeat', 1,
              function() {}, true);

          });
  }, false);

      }, function() {});



} // end of PL.init function

PL.disposeListeners = function() {
    if (_pGlob) {
        _pGlob.eventListeners.forEach(({ target, type, listener, optionsOrUseCapture }) => {
            target.removeEventListener(type, listener, optionsOrUseCapture);
        });
        _pGlob.eventListeners.length = 0;
    }
}

PL.disposeHTMLElements = function() {
    if (_pGlob) {
        _pGlob.htmlElements.forEach(elem => {
            elem.remove();
        });
        _pGlob.htmlElements.clear();
    }
}

PL.dispose = function() {
    PL.disposeListeners();
    PL.disposeHTMLElements();
    _pGlob = null;
    // backward compatibility
    if (v3d[Symbol.toStringTag] !== 'Module') {
        delete v3d.PL;
        delete v3d.puzzles;
    }
}



return PL;

}

export { createPL };
